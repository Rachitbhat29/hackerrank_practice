"""
Problem
Jane loves strings more than anything. She has a string  with her, and value of string  over function  can be calculated as given below:
        f(s)= |s|* Number of times s occurs in t
Jane wants to know the maximum value of  among all the substrings  of string . Can you help her?

Input Format
A single line containing string  t.

Output Format
Print the maximum value of f(s) among all the substrings (s) of string t.

Constraints
1<=|t|<=10 to power 5
The string consists of lowercase English alphabets.

Sample Input 0

aaaaaa
Sample Output 0

12
Explanation 0

f('a') = 6
f('aa') = 10
f('aaa') = 12
f('aaaa') = 12
f('aaaaa') = 10
f('aaaaaa') = 6
Sample Input 1

abcabcddd
Sample Output 1

9
Explanation 1

f values of few of the substrings are shown below:

f("a") = 2
f("b") = 2
f("c") = 2
f("ab") = 4
f("bc") = 4
f("ddd") = 3
f("abc") = 6
f("abcabcddd") = 9
Among the function values 9 is the maximum one.


"""



import math
import os
import random
import re
import sys

def find_count(_istr, _isubstr, _start=0):
    count = 0
    indexIs = _istr.find(_isubstr, _start)
    while indexIs >= 0:
        count = count + 1
        indexIs = _istr.find(_isubstr, indexIs+1)

    # return len(re.findall("(?=({0}))".format(_isubstr), _istr[_start:]))
    return count

# Complete the maxValue function below.
def maxValue(t):
    max = len(t)
    check = False
    repeated = False

    curr_index = 0

    curr_word = t[0]

    consume_words = 0
    i = 1
    while True:

        if i == len(t):
            break

        if i % 10 == 0:
            print(i)

        c = t[i]

        if not check:
            if not repeated and c in curr_word:
                repeated = True

            check = True

        curr_word = curr_word + c

        if check:
            curr_count = find_count(t, curr_word, curr_index)
            # print(curr_word, curr_count)
            tmp = curr_count*len(curr_word)
            if tmp > max:
                print(tmp, ' for ', curr_word)
                max = tmp

            # if tmp == len(t):
            #     x = math.floor(len(t)/2)
            #     x = x - x%tmp
            #     curr_index = i = (x - x%tmp)+1
            #
            #     curr_word = t[:x]
            #     curr_count = find_count(t, curr_word, curr_index)
            #     # print(curr_word, curr_count)
            #     tmp = curr_count * len(curr_word)
            #     if tmp > max:
            #         print(tmp, ' for ', curr_word)
            #         max = tmp

            elif curr_count == 1:
                # print('count 1 for word', curr_word)
                curr_index = i

                curr_word = curr_word[:-1]

                while t[curr_index:curr_index+len(curr_word)] == curr_word:
                    # print(curr_word)
                    curr_index = curr_index + len(curr_word)
                    # print(curr_index)

                i = curr_index
                curr_word = t[i]
                check = False
                repeated = False

        i = i + 1

    return max


if __name__ == '__main__':
    t = input("String:")
    result = maxValue(t)
    print(result)

# Solution to question added in readme

"""' Min-swap partition 
Given an array A and a pivot P. an array can be partitioned such that all elements that are less than P are to the left of all elements that are greater than P. Elements equal to P can appear anywhere in the array. More formally, a partition of A is a re-ordering A' such that all elements in A' that are less than P are to the left of all elements in A' that are greater than P (note that equal elements can be on either side of the partition). A min-swap partition of A is a partition A' that requires the minimum possible number of swaps between two elements in order to create a partition. For example, given 
A = 1 8. 9. 43.6 ) P = 5 
then a possible partition is A' = [4. 9, 8. 5, 6 1 which requires a single swap.""" 


def min_cost(a,p):
    pos = len(a)
    count =0
    for idx,i in enumerate(a[::-1]):
        if i>p:
            if len(a)-idx!= pos:
                a.insert(pos,a.pop(idx))
                count+=1
            pos -= 1

    return count

p = int(input("Enter Pivot value:"))
a_count = int(input("Enter the count of element for array:"))
a=[]

for i in range(a_count):
    a.append(int(input("Enter element:")))
m = min_cost(a,p)

print("Minimum cost is :"+ str(m))
